# Generated by Django 3.0.4 on 2020-03-13 19:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn', models.CharField(help_text='Is also used as HTTP Basic Auth username.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid FQDN: only "a-z", "0-9" and "-" is allowed', regex='(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\\.)+[a-zA-Z]{2,63}$)')], verbose_name='FQDN')),
                ('secret', models.CharField(help_text='Will be hashed if changed.', max_length=128)),
                ('ipv4_enabled', models.BooleanField(default=True, verbose_name='IPv4 enabled')),
                ('ipv6_enabled', models.BooleanField(default=True, verbose_name='IPv6 enabled')),
                ('ipv4', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4', verbose_name='IPv4')),
                ('ipv6', models.GenericIPAddressField(blank=True, null=True, protocol='IPv6', verbose_name='IPv6')),
                ('last_ipv4_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv6_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv4_change', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv6_change', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('fqdn',),
            },
        ),
        migrations.CreateModel(
            name='UpdateService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('url', models.CharField(help_text='E.g. "https://dyndns.example.com/nic/update"', max_length=2048, validators=[django.core.validators.URLValidator(schemes=['http', 'https'])], verbose_name='URL')),
                ('username_is_fqdn', models.BooleanField(default=False, help_text='Whether the HTTP Basic Auth username is the record FQDN.', verbose_name='Username is FQDN')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn', models.CharField(blank=True, max_length=255, validators=[django.core.validators.RegexValidator(message='Invalid FQDN: only "a-z", "0-9" and "-" is allowed', regex='(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\\.)+[a-zA-Z]{2,63}$)')], verbose_name='FQDN')),
                ('ipv4_enabled', models.BooleanField(default=True, verbose_name='IPv4 enabled')),
                ('ipv6_enabled', models.BooleanField(default=True, verbose_name='IPv6 enabled')),
                ('ipv4_netmask', models.PositiveSmallIntegerField(default=32, help_text='IPv4 record uses network prefix of the host. Set to 32 to use whole IP.', validators=[django.core.validators.MaxValueValidator(32)], verbose_name='IPv4 netmask')),
                ('ipv4_host_id', models.GenericIPAddressField(default='0.0.0.0', help_text='IPv4 record uses this host identifier, e.g. "0.0.0.42".', protocol='IPv4', verbose_name='IPv4 host identifier')),
                ('ipv6_netmask', models.PositiveSmallIntegerField(default=128, help_text='IPv6 record uses network prefix of the host. Set to 128 to use whole IP.', validators=[django.core.validators.MaxValueValidator(128)], verbose_name='IPv6 netmask')),
                ('ipv6_host_id', models.GenericIPAddressField(default='::', help_text='IPv6 record uses this host identifier, e.g. "::4042:42FF:FE42:4242".', protocol='IPv6', verbose_name='IPv6 host identifier')),
                ('effective_ipv4', models.GenericIPAddressField(blank=True, editable=False, null=True, protocol='IPv4', verbose_name='effective IPv4')),
                ('effective_ipv6', models.GenericIPAddressField(blank=True, editable=False, null=True, protocol='IPv6', verbose_name='effective IPv6')),
                ('username', models.CharField(blank=True, max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('last_ipv4_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv6_update', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv4_change', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_ipv6_change', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ddnsbroker.Host')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ddnsbroker.UpdateService')),
            ],
            options={
                'ordering': ('host', 'fqdn'),
                'unique_together': {('host', 'fqdn')},
            },
        ),
    ]
